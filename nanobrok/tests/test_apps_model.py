import unittest
from nanobrok.models import App, AppSchema, PacketType
from pprint import pprint
from marshmallow import ValidationError
from nanobrok.ext.database import db
from datetime import datetime
from nanobrok.blueprints.webui.utils import remove_key_from_dict

# This file is part of the Nanobrok Open Source Project.
# nanobrok is licensed under the Apache 2.0.

# Copyright 2021 p0cL4bs Team - Marcos Bomfim (mh4x0f)

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


class TestAppSchema(unittest.TestCase):
    def setUp(self):
        pass

    def test_packet_data_schema(self):
        app_data = {
            "name": "HittoCore",
            "icon": ",",
            "version_name": "6.7.1",
            "package_name": "com.hittocore.mh4x0f",
            "installed_at": 1508484583259,
            "updated_at": 1615727780,
            "sourceDir": "/data/app/MiDrive/MiDrive.apk",
            "dataDir": "/data/user/0/com.miui.newmidrive",
        }
        schema = AppSchema()
        try:
            result = schema.load(remove_key_from_dict(app_data, {"data"}))
        except ValidationError as err:
            print(err.messages)
            print(err.valid_data)

        app = App(**result)

        self.assertEqual(app.package_name, "com.hittocore.mh4x0f")
        self.assertEqual(
            app.installed_at, datetime.fromtimestamp(1508484583259 / 1000.0)
        )


if __name__ == "__main__":
    unittest.main()
